# ================================
# BACKUP CONFIGURATION
# ================================

# Local backup directory path
# Windows: H:/Backup or C:/Backups
# Linux/macOS: /backups or /var/backups
BACKUP_LOCAL_PATH=H:/Backup

# Default compression format: zip or tar.gz
DEFAULT_COMPRESSION_FORMAT=zip

# Maximum number of concurrent backups
MAX_CONCURRENT_BACKUPS=5

# SSH connection timeout in milliseconds
SSH_TIMEOUT=30000

# ================================
# SFTP OPTIMIZATION
# ================================

# Number of concurrent chunks for parallel download (32-128)
# Higher = faster but more CPU/memory
# Slow network: 32, Fast network: 128
SFTP_CONCURRENCY=64

# Chunk size in bytes (default: 64KB = 65536)
SFTP_CHUNK_SIZE=65536

# Number of retry attempts on failure
SFTP_RETRY_ATTEMPTS=3

# Delay between retry attempts in milliseconds
SFTP_RETRY_DELAY=2000

# ================================
# GOOGLE DRIVE CONFIGURATION
# ================================

# Enable/disable Google Drive upload globally
# Set to 'true' to enable, 'false' to disable
# This is the DEFAULT value - can be overridden per request
GOOGLE_DRIVE_ENABLED=false

# Path to Google Drive credentials JSON file (Service Account)
# Download from Google Cloud Console
GOOGLE_DRIVE_CREDENTIALS_PATH=credentials/google-drive.json

# Default Google Drive folder ID to upload files
# Get from Google Drive URL: https://drive.google.com/drive/folders/[FOLDER_ID]
GOOGLE_DRIVE_FOLDER_ID=

# Google Drive API Key (optional, for public API access)
# If provided, will be used for authentication
# If not provided, will fallback to credentials file
GOOGLE_DRIVE_API_KEY=

# ================================
# DISCORD NOTIFICATIONS
# ================================

# Enable/disable Discord notifications
# Set to 'true' to enable, 'false' to disable
DISCORD_ENABLED=false

# --------------------------------
# METHOD 1: Bot Token (Recommended) ✨ NEW
# --------------------------------
# More features, better control, persistent connection
# Get from: Discord Developer Portal → Bot → Token

# Discord Bot Token (from Discord Developer Portal)
# Get from: https://discord.com/developers/applications → Your App → Bot → Token
DISCORD_BOT_TOKEN=

# Discord Channel ID to send notifications
# Get from: Discord → Right click channel → Copy Channel ID (enable Developer Mode first)
DISCORD_CHANNEL_ID=

# --------------------------------
# METHOD 2: Webhook (Simple)
# --------------------------------
# Easy setup, no bot application needed
# Get from: Discord Channel Settings → Integrations → Webhooks

# Discord Webhook URL (from Discord channel settings)
# Get from: Channel Settings → Integrations → Webhooks
# Format: https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN
DISCORD_WEBHOOK_URL=

# Bot display name in Discord (for webhook only)
DISCORD_BOT_USERNAME=Backup Bot

# Bot avatar URL (for webhook only, optional)
# Upload image to imgur or other hosting and paste URL here
DISCORD_BOT_AVATAR_URL=

# --------------------------------
# PRIORITY:
# If both are set, Bot Token will be used (preferred)
# --------------------------------

# ================================
# APPLICATION SETTINGS
# ================================

# Application port (default: 3000)
PORT=3000

# Node environment: development, production, test
NODE_ENV=development

